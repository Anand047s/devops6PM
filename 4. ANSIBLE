DAY-01:

ANSIBLE:
TO AUTOMATE -- > SERVER, INSTALLING PKGS, DEPLOYMENT
IT WILL DO THE WORK ON ALL SERVERS AT A SIGLE TIME.
CONFIGURATION MANAGEMENT TOOL:

CONFIGURATION: SOFTWARE (OS, SOFTWARE), HARDWARE: CPU, RAM, MEMORY
MANAGEMENT: UPDATE, DELETE, INSTALLING OF PKGS -------------


100 SERVERS --- > 100 HOURS FOR DEPLOYMENT & CONFIGURATION

1 SERVER  --- > 1 HR
100	  --- > 1 HR

SETUP:
CREATE 5 SERVERS (1-ANSIBLE, 4 WORKER NODES)


ALL SERVERS:
hostnamectl set-hostname
sudo -i
passwd root
vim /etc/ssh/sshd_config
38: PermitRootLogin yes  # uncomment
63: PasswordAuthentication yes

systemctl restart sshd
systemctl status sshd

to communicate with all servers
===============================================================
ANSIBLE SERVER:

amazon-linux-extras install ansible2 -y
yum install python python-pip python-level -y
vim /etc/ansible/hosts

[dev]
172.31.86.81
172.31.82.63

[test]
172.31.95.156
172.31.83.100

vim /etc/asnible/ansible.cfg (uncomment 14 & 22)

SHH CONNECTIONS: ANSIBLE SERVER

ssh-keygen  --- > 4 ENTERS

ssh-copy-id root@172.31.82.63 --- > yes --- > password
ssh 172.31.82.63
ctrl + d (logout)
Note: If you do not log out and try to connect to the new server it won't connect

Connect all the servers in this way

cd .ssh --- > cat known_hosts

===============================================================
INVENTORY HOST PATTERN:

ansible all --list-hosts          # shows all the servers
ansible all[1] --list-hosts       # shows the 2nd server of all 
ansible dev --list-hosts          # shows the dev server only
ansible test --list-hosts         # shows the test server only
ansible test[1] --list-hosts      # shows the test 2nd server only
ansible all[1:3] --list-hosts     # shows server 2 to server 4
ansible all[-1] --list-hosts      # shows the last server
ansible all[-3] --list-hosts      # shows the last 3rd server

===============================================================
IF YOU ARE WORKING WITH NON ROOT USER USE SUDO

WORKING WITH ANSIBLE:

1. ADHOC: SIMPLE LINUX COMMANDS USED FOR ONLY ONCE WORKS

ansible all -a "ls"
ansible: command line tool
all  : servers 
-a : arguments 
ls : linux commands

ansible all -a "touch file1"
ansible all -a "yum install git -y"



1  passwd root
    2  vim /etc/ssh/sshd_config
    3  systemctl restart sshd
    4  systemctl status sshd
    5  amazon-linux-extras install ansible2 -y
    6  yum install python3 python-pip python-dlevel -y
    7  hostname -i
    8  vim /etc/ansible/hosts
    9  vim /etc/ansible/ansible.cfg
   10  ssh-keygen
   11  ls -al
   12  cd .ssh/
   13  ll
   14  cat id_rsa
   15  cd
   16  ssh-copy-id root@172.31.94.77
   17  ssh 172.31.94.77
   18  ssh-copy-id root@172.31.94.95
   19  ssh 172.31.94.95
   20  ssh-copy-id root@172.31.95.186
   21  ssh 172.31.95.186
   22  ssh-copy-id root@172.31.91.52
   23  ssh 172.31.91.52
   24  ls -al
   25  cd .ssh
   26  ll
   27  cat known_hosts
   28  cd
   29  cat /etc/ansible/hosts
   30  ansible all --list-hosts
   31  ansible dev --list-hosts
   32  ansible test --list-hosts
   33  ansible all --list-hosts
   34  ansible all[0] --list-hosts
   35  ansible all[1] --list-hosts
   36  ansible all[3] --list-hosts
   37  ansible dev[1] --list-hosts
   38  ansible test[0] --list-hosts
   39  ansible all --list-hosts
   40  ansible all[-1] --list-hosts
   41  ansible all[-2] --list-hosts
   42  ansible all --list-hosts
   43  ansible all[1:3] --list-hosts
   44  ansible all -a "ls"
   45  ansible all -a "touch file1"
   46  ansible all -a "ls"
   47  ansible all -a "mkdir dir1"
   48  ansible all -a "ls"
   49  ansible all -a "yum install git -y"
   50  ansible all -a "git -v"
   51  ansible all -a "tyum install httpd -y"
   52  ansible all -a "yum install httpd -y"
   53  ansible all -a "systemctl start httpd -y"
   54  ansible all -a "systemctl start httpd"
   55  ansible all -a "systemctl status httpd"
   56  ansible all -a "useradd raham"
   57  ansible all -a "cat /etc/passwd"
   58  hostnamectl set-hostname ansible
   59  sudo -i
   60  histroy
   61  history


=======================================================================================================

DAY-02:

MODULES: 
work on key-value pairs.
key-value pair is also called a Dictionary.
Modules are reusable
define -m for module

ansible all -a "yum install git -y"
ansible all -m yum -a "pkg=git state=present"
ansible all -m yum -a "pkg=java-1.8.0-openjdk state=present"
ansible all -m yum -a "name=httpd state=present"
ansible all -m yum -a "name=httpd state=latest"
ansible all -m service -a "name=httpd state=restarted"
ansible all -m user -a "name=venkat state=present
ansible all -m user -a "name=venky"
ansible all -m copy -a "src=app.yml dest=/tmp"


PLAYBOOKS: 
Consist of one or more than one module
to do the work more efficiently
to write the playbook we need to use YAML.
YAML=YET ANOTHER MARKUP LANGUAGE
It is serializable language & Human readable language.
in Yaml the first line starts with --- & end with ...
YAML Works on key-value pair, it is also called as Dictionary. 
In YAML indentation is more important.
EXTENSION: yml=yaml

PLAYBOOK-1 EXAMPLE: SINGLE MODULE
- hosts: all
  tasks:
    - name: installing git
      yum: pkg=git state=present

PLAYBOOK-2 EXAMPLE: MULTI MODULE

- hosts: all
  tasks:
    - name: installing git
      yum: pkg=git state=present

    - name: installing maven
      yum: pkg=maven state=present

PLAYBOOK-3 EXAMPLE: ACTION & YUM MODULE

- hosts: all
  tasks:
    - name: installing git
      yum: pkg=git state=present

    - name: installing maven
      yum: pkg=maven state=present

    - name: installing java
      action: yum pkg=java-1.8.0-openjdk state=present

PLAYBOOK-4 EXAMPLE: ACTION & YUM & COMMAND & SHELL MODULE

- hosts: all
  tasks:
    - name: installing git
      yum: pkg=git state=absent

    - name: installing maven
      yum: pkg=maven state=absent

    - name: installing java
      action: yum pkg=java-1.8.0-openjdk state=absent

    - name: installing httpd
      shell: yum install httpd* -y



PLAYBOOK-5 EXAMPLE: ACTION & YUM & COMMAND & SHELL & COMMAND MODULE

- hosts: all
  tasks:
    - name: installing git
      yum: pkg=git state=absent

    - name: installing maven
      yum: pkg=maven state=absent

    - name: installing java
      action: yum pkg=java-1.8.0-openjdk state=absent

    - name: installing httpd
      shell: yum install httpd -y

    - name: installing tree
      command: yum install tree -y

 


PLAYBOOK-6 EXAMPLE: ACTION & YUM & COMMAND & SHELL & COMMAND & RAW MODULE


- hosts: all
  tasks:
    - name: installing git
      yum: pkg=git state=absent

    - name: installing maven
      yum: pkg=maven state=absent

    - name: installing java
      action: yum pkg=java-1.8.0-openjdk state=absent

    - name: installing httpd
      shell: yum install httpd -y

    - name: installing tree
      command: yum install tree -y

    - name: installing docker
      raw: yum install docker -y


NOTE: In above playbook yum & action works on key value pair.
shell, command and raw will not use key value pair.

raw >> command >> shell

TAGS: Used to execute a particular task

- hosts: all
  tasks:
    - name: installing git
      yum: pkg=git state=absent
      tags: a

    - name: installing maven
      yum: pkg=maven state=absent
      tags: b

    - name: installing java
      action: yum pkg=java-1.8.0-openjdk state=absent
      tags: c

    - name: installing httpd
      shell: yum install httpd -y
      tags: d

    - name: installing tree
      command: yum install tree -y
      tags: e

    - name: installing docker
      raw: yum install docker -y
      tags: f

SINGLE TAG: ansible-playbook playbook1.yml --tags a
MULTI TAG:ansible-playbook playbook1.yml --tags e,f
SKIPPED TAGS: ansible-playbook playbook1.yml --skip-tags "e"


HISTORY:

 62  ansible all -m yum -a "pkg=git state=present"
   63  ansible all -a "yum remove git* -y"
   64  ansible all -m yum -a "pkg=git state=present"
   65  ansible all -m yum -a "pkg=java state=present"
   66  ansible all -m yum -a "pkg=httpd state=present"
   67  ansible all -m yum -a "pkg=httpd state=absent"
   68  ansible all -m yum -a "pkg=httpd state=present"
   69  ansible all -m service -a "name=httpd state=started"
   70  ansible all -a service -a "name=httpd state=stop"
   71  ansible all -m service -a "name=httpd state=stop"
   72  ansible all -m service -a "name=httpd state=stopped"
   73  ansible all -m user -a "name=abcd state=present"
   74  ansible all -a "cat /etc/passwd"
   75  ll
   76  cat>file1
   77  ll
   78  ansible all -a "ls"
   79  mv file1 file2
   80  ll
   81  ansible all -m copy -a "src=file2, dest=/root"
   82  ansible all -m copy -a "src=file2 dest=/root"
   83  LL
   84  rm -rf file2
   85  vim playbook1.yml
   86  ansible all -a "yum remove git* -y"
   87  ll
   88  ansible-playbook playbook1.yml
   89  ansible all -a "yum remove git* -y"
   90  cat playbook1.yml
   91  vim playbook1.yml
   92  ansible-playbook playbook1.yml
   93  vim playbook1.yml
   94  ansible-playbook playbook1.yml
   95  vim playbook1.yml
   96  ansible-playbook playbook1.yml
   97  vim playbook1.yml
   98  ansible-playbook playbook1.yml
   99  vim playbook1.yml
  100  ansible-playbook playbook1.yml
  101  vim playbook1.yml
  102  ansible-playbook playbook1.yml
  103  vim playbook1.yml
  104  ansible-playbook playbook1.yml
  105  vim playbook1.yml
  106  ansible-playbook playbook1.yml
  107  vim playbook1.yml
  108  cat playbook1.yml
  109  ansible-playbook playbook1.yml --tags d
  110  ansible-playbook playbook1.yml --tags a,c
  111  ansible all -a "yum remove git* java-1.8.0-openjdk* -y"
  112  ansible-playbook playbook1.yml --tags a,c
  113  ansible-playbook playbook1.yml --tags "a,c"
  114  cat playbook1.yml
  115  ansible-playbook playbook1.yml --tags e,f
  116  cat playbook1.yml
  117  ansible all -a "yum remove git* java-1.8.0-openjdk* docker* tree* -y"
  118  cat playbook1.yml
  119  ansible-playbook playbook1.yml --skip-tags "e"
  120  history

