JENKINS: Its a CI/CD TOOL.

CI : CONTINOUS INTEGRATION
CD : CONTINOUS DELIVERY/DEPLOYMENT

INTEGRATION : ADDING (SOUCE CODE)
INTEGRATE (ADDING) THE OLD CODE WITH THE NEW CODE.

CI : CONTINOUS BUILD + CONTINOUS TEST

BEFORE CI LIMITATIONS:
1. TIME CONSUMING
2. MANUAL WORK
3. COMPLEXITY 

CI : BUILD + TEST + DEPLOY (OPT)

CD: CONTINUOUS DELIVERY/DEPLOYMENT

CONTINUOUS DELIVERY : Deploying the code into production manually.
CONTINUOUS DEPLOYMENT: Deploying the code into production Automatically.


PIPELINE: 
Series of events interlinked with each other.
Step by step execution of a particular process. 


ENV : 
1. NON-PROD : DEV, TEST  (INTERNAL PURPOSE)
2. UAT      : USER ACCEPTANCE TESTING (CLIENT)
3. PROD     : LIVE SERVER (USERS) 

Every app we are using now is Deployed on PROD(LIVE) sever 


JENKINS: 
Jenkins is an open source project written in java by Kohsuke Kawaguchi. 
it runs on the Window, Linux and Mac OS.
It is Community supported.
Every thing is going to be worked on  plugins.
Automates the Entire Software Development Life Cycle (SDLC).

HUDSON -- > SUN MICRO SYSTEM(2004) -- > ORCALE -- > HUDSON=JENKINS, PAID=FREE

SETUP: 5 STEPS (8080 -- > OPEN IN SG) --- > ALL TRAFFIC (ANYWHERE)

STEP-1: GETTING REPO & KEY (jenkins.io)
  sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
  sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
  
STEP-2: INSTALLING JAVA-11/17, GIT, MAVEN, JENKINS
  yum install java git maven jenkins -y

SETP-3: START JENKINS SERVICE
   systemctl start jenkins.service
   systemctl status jenkins.service
Note: By default any service will be on stopped state, we need to start it.

STEP-4: CONNECTING TO JENKINS
  Copy-public-ip/dns of jenkin server:8080
  EX: http://52.90.84.94:8080/
  
STEP-5: CONFIGURE

http://52.90.84.94:8080/


INTEGRATION OF GIT WITH JENKINS:

NEW ITEM -- > FREE STYLE (NAME) -- > OK -- > GIT -- > 
build -- > console output -- > green color
cd /var/lib/jenkins/workspace/JOB-1

Dahboard -- > job -- > condigure -- > Build step -- > Invoke top-level Maven targets
mvn compile -- > save 

green   : success
red     : failed
blue    : processing
black   : stopped
orange  : some depends missing

CUSTOM WROKSPACE: getting our outputs on our required locations on server.

cd 
mkdir -p swiggy/dailybuilds
cd /
chown jenkins:jenkins /root/ -R

dashboard -- > job -- > general -- > advance -- > Use custom workspace -- > 
/root/swiggy/dailybuilds -- > save

EXECUTING LINUX COMMANDS:

Build steps -- > execure shell command -- > 



  



